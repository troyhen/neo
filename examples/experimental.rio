# The stuff in here is not part of the language yet.
# These are ideas we are tossing around. Let us know if you like
# or hate any of them.

a.?run  # same as `a.run() if a.can?('run')`
a.?run  # or does it mean `a.run() unless a.nil?`

a b c   # same as `a.b.c` (ala Scala)
a b c   # or does it mean a(b, c)
a b c   # or does is it an error
a b c d e f # what does this mean???

a.b c   # same as a.b.c (ala Scala)
a.b c   # or does it mean a.b(c) (ala Ruby)

a < b < c   # `a < b && b < c`
a <= b <= c # `a <= b && b <= c`

# Plugins
# Literals
a = %map {   # or %m Map Literals
    'Rhode Island':'Providence'
    'Utah':'Salt Lake City'
}

a = %html   # or %h
<div id="content">
    <p class="heading">#{title}</p>
    <br/>
</div>

a = %xml   # or %x
<person name="George Harrison">
    <salary period="annual">#{@salary}</salary>
    <phone>321-245-2345</phone>
</person>

a = /[A-Z_]+/i  # regular expressions
a = %re([A-Z_]+)
a = %a[1, 2, 3, 5, 8, 13, 21] # Array literals

# Plugin implementation
use java.util.regex.Pattern

plugin RegularExpression
    def name -> 'regex'
    def abrev -> 're'

    regex: /\/((\[(\\\]|[^\]])+|\/|[^/])+)\/[iop]?/ -> (text) {
        Pattern.new text
    }
end
